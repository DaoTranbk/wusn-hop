from constructor.nrk import Nrk
from utils.input import WusnInput
import numpy as np
import os

def init_individual(num_of_relays, num_of_sensors):
    length = 2 * (num_of_sensors + num_of_relays + 1)

    individual = list(np.random.uniform(0, 1, size=(length,)))

    return individual

max_relays = 14
max_hops = 6

def is_feasible(data_path, is_hop=True):
    inp = WusnInput.from_file(data_path)
    constructor = Nrk(inp, max_relays, max_hops, is_hop=is_hop)
    
    for _ in range(1, 2):
        indiv = init_individual(inp.num_of_relays, inp.num_of_sensors)
        indiv = [0.4199851092624649, -0.15090554971361742, 0.8070322343060116, 0.538662247439568, 0.8467713291771809, 0.5816648055640273, 0.4621189408284302, -0.12686173228612524, 0.7262236366954112, 0.30343418389827104, 0.5474100700086406, 0.5607468937208169, 0.6638998089408071, 0.3061806756492076, 0.14574380590638522, 0.3277832094784092, 0.3319247866606555, 0.3195694138980062, 0.8196723185156379, 0.27173715794437175, -0.07125885301154222, 0.48031519604355255, 1.1195135969502412, 0.5404453845236301, 0.47457860101461535, -0.078448656922734, 0.830425952776821, 0.08825191026900156, 0.7624884479547053, 0.3995903263363942, 0.22847954890187874, -0.04411768824586704, 0.5497669147071365, 0.9988899707442598, 0.4400953582129487, 0.3589984370875418, 0.6725817406938885, 0.5974138635071323, 0.4900068959084322, 0.26691956587219284, 0.2728554200100852, 0.5979675991909337, 0.8294468537906475, 0.5345554504561723, 0.15444259339280614, 1.0480442061211592, 0.1417260595280501, 0.9085408316551826, 0.5795560583761996, -0.02093543537470407, 0.6084989608091936, 0.6602945252160093, 0.41340767076280893, 0.37739618906907046, 0.2929381821962787, 0.11102625906250012, 0.6048498995306106, 0.9798211661748177, 0.8259802109421867, 0.8496025658172088, 0.011711270402778078, 0.30806214367172435, 0.7277084152325154, 0.9631838550916733, 0.5643097258955456, 0.5595972204508198, 0.9153377127673942, 1.1485834112296152, 0.5002647755314499, 0.9513889493533566, 0.4083131732809723, 0.9919650486862323, 0.3288231909846656, 0.06875053230876471, 0.9855196213985017, 0.7900597852541342, 0.8950113027540498, 0.2660710214524843, 0.26583095552643926, 0.34831913363872025, 0.4627366685876016, 1.2857006561053872, 0.37475739190025964, 0.9998235650649961, -0.05112289571419926, 0.9247167958427315, 0.4948235979089267, 0.6365963809861999, 0.1226646841838541, 0.22688780074650539, 0.19068646514993542, 0.2465260037267198, 0.12224676021711223, 0.6838835484484486, 1.007831458982552, 0.0828562998497865, 0.3506301251262094, 0.23107425359547795, 0.9393602781666232, 1.0443943882877076, 0.33118408340259753, 0.08538288428633481, 0.6843347195997072, 0.4347363408286439, 0.16611503191798196, 0.5840785427983939, 0.47441205805324116, 0.127632750570716, 0.6258727696355245, 0.016250146028690793, 0.2737860689895349, 0.6005802684314449, 0.21626410496483495, 0.18145253885136764, 0.87774236860004, 0.5543114698858704, 0.6904958860483035, 0.32825918617350147, 0.1640333247542767, 0.3113549569170684, 0.18829288513579, 0.46568132664691997, 0.17071035071122614, 0.4326416994214617, 0.08153234434632775, 0.5390309512683338, 0.4301637384228997, 0.16753826513563702, 0.7203700513407917, 0.39530701670825624, 0.841830974093187, 0.9851688968516202, -0.07973753411780332, 0.35861451551089046, 0.4498133844270193, 0.17570615548718843, 0.45045876124423967, 0.6108311938643323, 0.2875404499357116, 0.40592181686946877, 0.7211833866440711, 1.0029879663117856, 1.2092952844178344, -0.04379425234734213, 0.7109828233768605, 0.8212610318076242, 0.7684945307483465, 0.8373636306326426, 1.0790615909779264, 0.798986936469271, -0.07305716682748356, 0.6390416924759551, 0.6689095065000908, -0.09730840247233677, 0.4796553969957299, -0.06492966004455575, 0.32241280094908936, 0.4209289022849708, 1.2772620367444925, 0.5859159091987678, 0.6570767879835822, 0.16648040844389977]
        loss = constructor.get_loss(indiv)
        print(loss)
        if loss < 1e8:
            return True

    return False

print(is_feasible('data/layer/uu-dem4_r25_1.json', is_hop=False))

# regen = ['ga-dem3_r25_1',
#         'ga-dem8_r25_1',
#         'no-dem1_r25_1',
#         'no-dem2_r25_1',
#         'no-dem5_r25_1',
#         'no-dem8_r50_1',
#         'uu-dem1_r25_1',
#         'uu-dem2_r25_1',
#         'uu-dem3_r25_1',
#         'uu-dem3_r50_1',
#         'uu-dem4_r25_1',
#         'uu-dem6_r25_1',
#         'ga-dem10_r25_1',
#         'ga-dem2_r25_1',
#         'ga-dem3_r25_1',
#         'ga-dem4_r25_1',
#         'no-dem5_r25_1',
#         'no-dem8_r25_1',
#         'uu-dem10_r50_1',
#         'uu-dem1_r25_1',
#         'uu-dem5_r25_1']
# notok = []
# regen = ['ga-dem3_r25_1']
# for te in regen:
#     layer_path = os.path.join('data/layer', te + '.json')
#     hop_path1 = os.path.join('data/hop', te + '_0.json')
#     hop_path2 = os.path.join('data/hop', te + '_40.json')
#     if is_feasible(layer_path, is_hop=False) and is_feasible(hop_path1, is_hop=True) and is_feasible(hop_path2, is_hop=True):
#         print('ok', te)
#     else:
#         print('not ok', te)
#         notok.append(te)


# print([tmp + '.json' for tmp in notok])